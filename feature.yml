AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  EcsTaskCpuUtilizedMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: ecs_task_cpu_utilized
      FilterPattern: '{ $.Type="Task"&&$.TaskId=%[a-zA-Z0-9]% &&$.CpuUtilized=%\d% }'
      LogGroupName: /aws/ecs/containerinsights/ecs-demo-cluster/performance
      MetricTransformations:
        - MetricNamespace: ecs-demo-cluster
          MetricName: cpu-utilized-metric
          MetricValue: '$.CpuUtilized'
          Dimensions:
            - Key: TaskId
              Value: '$.TaskId'
  EcsTaskCpuReservedMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: ecs_task_cpu_reserved
      FilterPattern: '{ $.Type="Task"&&$.TaskId=%[a-zA-Z0-9]% &&$.CpuReserved=%\d% }'
      LogGroupName: /aws/ecs/containerinsights/ecs-demo-cluster/performance
      MetricTransformations:
        - MetricNamespace: ecs-demo-cluster
          MetricName: cpu-reserved-metric
          MetricValue: '$.CpuReserved'
          Dimensions:
            - Key: TaskId
              Value: '$.TaskId'
  EcsTaskMemoryUtilizedMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: ecs_task_memory_utilized
      FilterPattern: '{ $.Type="Task"&&$.TaskId=%[a-zA-Z0-9]% &&$.MemoryUtilized=%\d% }'
      LogGroupName: /aws/ecs/containerinsights/ecs-demo-cluster/performance
      MetricTransformations:
        - MetricNamespace: ecs-demo-cluster
          MetricName: memory-utilized-metric
          MetricValue: '$.MemoryUtilized'
          Dimensions:
            - Key: TaskId
              Value: '$.TaskId'
  EcsTaskMemoryReservedMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: ecs_task_memory_reserved
      FilterPattern: '{ $.Type="Task"&&$.TaskId=%[a-zA-Z0-9]% &&$.MemoryReserved=%\d% }'
      LogGroupName: /aws/ecs/containerinsights/ecs-demo-cluster/performance
      MetricTransformations:
        - MetricNamespace: ecs-demo-cluster
          MetricName: memory-reserved-metric
          MetricValue: '$.MemoryReserved'
          Dimensions:
            - Key: TaskId
              Value: '$.TaskId'
  EcsDemoEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EcsDemoEventRule
      EventPattern: >-
        {"source":["aws.ecs"],"detail-type":["ECS Task State
        Change"],"detail":{"containers":{"containerArn":[{"wildcard":"arn:aws:ecs:*ecs-demo-cluster*"}]},"group":["service:ecs-demo-service"],"lastStatus":["PROVISIONING","DEPROVISIONING"]}}
      State: ENABLED
      Description: Capture ecs task state event
      EventBusName: default
      Targets:
        - Id: 'EcsDemoEventRuleFromCFN'
          Arn:
            Fn::Sub: >-
              arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ecs_alarm_handler
  EcsAlarmHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ecs_alarm_handler
      CodeUri: s3://kevin5603/ecs_alarm_handler.py.zip
      Handler: ecs_alarm_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '--add-opens=java.management/sun.management=ALL-UNNAMED'
      Role: !GetAtt ExecutionLambdaRole.Arn
      Timeout: 120
  ExecutionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: AWSLambdaCloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DeleteAlarms'
                Resource: 'arn:aws:cloudwatch:*'
              - Effect: Allow
                Action:
                  - 'lambda:RemovePermission'
                  - 'lambda:AddPermission'
                Resource: 'arn:aws:lambda:us-west-2:975049910219:function:*'
  EventBridgeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EcsAlarmHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  AlarmProcessorHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: close_unhealthy_task
      CodeUri: s3://kevin5603/close_unhealthy_task.py.zip
      Handler: close_unhealthy_task.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '--add-opens=java.management/sun.management=ALL-UNNAMED'
      Role: !GetAtt ExecutionLambdaRole.Arn
      Timeout: 120

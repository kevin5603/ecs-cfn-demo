AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  clusterName:
    Type: String
    Default: ecs-demo-cluster
  serviceName:
    Type: String
    Default: ecs-demo-service
Resources:
  EcsAlarmHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ecs-alarm-handler
      CodeUri: s3://ecs-demo-bucket-xxx/artifact/lambda/ecs-alarm-handler.zip
      Handler: ecs-alarm-handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Environment:
        Variables:
          ALARM_FUNCTION_NAME: close-unhealthy-task
          REGION: us-west-2
          ACCOUNT_ID: !Ref AWS::AccountId
          EVAL_PERIODS: 1
          THRESHOLD: 1
          CLUSTER_NAME: ecs-demo-cluster
          CPU_THRESHOLD: 50
          MEMORY_THRESHOLD: 20
      Role: !GetAtt ExecutionLambdaRole.Arn
      Timeout: 120
      Events:
        MySamEvent:
          Type: EventBridgeRule
          Properties:
            Pattern: !Sub >-
              {"source":["aws.ecs"],"detail-type":["ECS Task State
              Change"],"detail":{"containers":{"containerArn":[{"wildcard":"arn:aws:ecs:*${clusterName}*"}]},"group":["service:${serviceName}"],"lastStatus":["PROVISIONING","DEPROVISIONING"]}}
            RuleName: EcsTaskStateChange
            Target:
              Id: EcsTaskStateChange
  ExecutionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: AWSLambdaCloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AWSLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DeleteAlarms'
                Resource: 'arn:aws:cloudwatch:*'
              - Effect: Allow
                Action:
                  - 'lambda:RemovePermission'
                  - 'lambda:AddPermission'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
  EventBridgeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EcsAlarmHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  CloseUnhealthyTaskHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: close-unhealthy-task
      CodeUri: s3://ecs-demo-bucket-xxx/artifact/lambda/close-unhealthy-task.zip
      Handler: close-unhealthy-task.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Role: !GetAtt CloseUnhealthyTaskExecutionLambdaRole.Arn
      Timeout: 120
  CloseUnhealthyTaskExecutionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: AWSLambdaCloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: StopTask
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:StopTask'
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${clusterName}/*'
        - PolicyName: ListTasks
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:ListTasks'
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/${clusterName}/*'
  CloseUnhealthyTaskLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CloseUnhealthyTaskHandler
      Action: lambda:InvokeFunction
      Principal: ecs-tasks.amazonaws.com
